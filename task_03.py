def hanoi_towers(n: int, source_peg: str, auxiliary_peg: str, target_peg: str):
    """
    Рекурсивно вирішує головоломку "Ханойські вежі" та друкує кроки.

    Args:
        n (int): Кількість дисків.
        source_peg (str): Назва початкового стрижня (наприклад, 'A').
        auxiliary_peg (str): Назва допоміжного стрижня (наприклад, 'B').
        target_peg (str): Назва цільового стрижня (наприклад, 'C').
    """
    # Базовий випадок рекурсії: якщо залишився 1 диск, перемістити його напряму [cite: 35]
    if n == 1:
        print(f"Перемістити диск 1 з {source_peg} на {target_peg}")
        return

    # Рекурсивний крок [cite: 36]
    # 1. Перемістити n-1 дисків з початкового на допоміжний стрижень,
    #    використовуючи цільовий як тимчасовий.
    hanoi_towers(n - 1, source_peg, target_peg, auxiliary_peg)

    # 2. Перемістити найбільший (n-й) диск з початкового на цільовий стрижень.
    print(f"Перемістити диск {n} з {source_peg} на {target_peg}")

    # 3. Перемістити n-1 дисків з допоміжного на цільовий стрижень,
    #    використовуючи початковий як тимчасовий.
    hanoi_towers(n - 1, auxiliary_peg, source_peg, target_peg)

def main():
    while True:
        try:
            num_disks = int(input("Введіть кількість дисків для Ханойських веж (наприклад, 3): ")) # Вхідними даними програми має бути число n [cite: 20]
            if num_disks <= 0:
                print("Кількість дисків має бути додатним цілим числом.")
            else:
                break
        except ValueError:
            print("Будь ласка, введіть ціле число.")

    print(f"\nКроки для переміщення {num_disks} дисків з A на C, використовуючи B:")
    # Викликаємо функцію для переміщення дисків з A на C, використовуючи B [cite: 17, 18]
    hanoi_towers(num_disks, 'A', 'B', 'C')

if __name__ == "__main__":
    main()
